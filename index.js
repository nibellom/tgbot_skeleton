import { Telegraf, Markup } from 'telegraf'
import { message } from 'telegraf/filters'
import dotenv from 'dotenv'
import { mongoose } from 'mongoose'
import User from './models/User.js'

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userStates = new Map()
let state 

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
dotenv.config()

//–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–æ—Ç–∞
const newUserAdd = async(userId, username, firstName, lastName) => {  
    console.log('User: ', userId, username, firstName, lastName)
    const existingUser = await User.findOne({ userId })
    if (!existingUser) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
      console.log('Add new user, id: ', userId)
      const newUser = new User({
        userId,
        username,
        firstName,
        lastName,
      })
  
      try {
        await newUser.save()
        console.log('User saved successfully.')
      } catch (err) {
        console.error('Error saving user:', err)
      }
    }
  }

// –ü–æ–¥–∫–ª—é—á–∞–µ–º mongo
mongoose.connect(process.env.MONGO_SRV)

  const db = mongoose.connection

  db.on('error', console.error.bind(console, 'MongoDB connection error:'))
  db.once('open', () => {
    console.log('Connected to MongoDB')
  })

process.on('SIGINT', () => {
    mongoose.connection.close(() => {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ –∏–∑-–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
        process.exit(0)
    })
})

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(token)

// –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
const commands = [
    { command: '/start', description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
    { command: '/search', description: '–ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏' },
    { command: '/add', description: '–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É' },
    { command: '/lk', description: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –∫–∞–±–∏–Ω–µ—Ç' },
    { command: '/support', description: '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞' },
    // –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
  ]
  
  bot.telegram.setMyCommands(commands)
    .then(() => {
      console.log('–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
    })
    .catch(console.error)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ ID
const messageOnId = async(userId, message) => {
    await bot.telegram.sendMessage(userId, message)
    .then(() => {
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    })
  }

  //–ú–µ–Ω—é
const menu = async(ctx) => {   
    try {
      state = {}
      state.selecting = 'SEARCH_TUR' //–∫–ª—é—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
      const userId = JSON.stringify({ ctxValue: ctx.message.from.id})
      console.log('–ö–ª–∞—Å—Å SEARCH_TUR –ø–æ–¥–∫–ª—é—á–µ–Ω')
      userStates.set(ctx.from.id, state)
      console.log(userStates)
      await ctx.replyWithHTML(`üèî <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b>`, Markup.inlineKeyboard(
        [
          [Markup.button.callback('üèù –ö–Ω–æ–ø–∫–∞ üèù', `buttonName:${userId}`)],    //–∫–Ω–æ–ø–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
          [
            Markup.button.webApp('üèù –ú–∏–Ω–∏–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'https://exayna.com')     //–∫–Ω–æ–ø–∫–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ –º–∏–Ω–∏–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          ]
        ]
      )) 
    } catch (e) {
      console.error(e)
    }  
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.start(async(ctx) => {
    const startParams = ctx.startPayload  
    if (startParams === 'payget') {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
      console.log('–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ payget')
      state = userStates.get(ctx.from.id) || {} 
      try {
        const id = state.bookingId
        console.log(state)
        console.log('ID –±—Ä–æ–Ω–∏: ', id)
        payment (ctx, id) 
      } catch (e) {
        console.error(e)
      }    
    } else if (startParams === '') {
      menu(ctx)
      const userId = ctx.message.from.id
      const username = ctx.message.from.username
      const firstName = ctx.message.from.first_name
      const lastName = ctx.message.from.last_name
      newUserAdd(userId, username, firstName, lastName)  
    } else {
        state = userStates.get(ctx.from.id) || {} 
        const userId = ctx.message.from.id
        state.turIdLink = startParams
        state.selecting = 'TUR_LINK'
        userStates.set(userId, state)
        console.log(state)
        ctx.reply(`–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –ø–æ–µ–¥–µ—Ç?`)
    }
  })

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
bot.command('adm', async(ctx) => {
    try {
      state = {} 
      console.log('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
      ctx.reply(`–ú–µ–Ω—é:
  /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.
  `) 
    } catch (e) {
      console.error(e)
    }
  })

//–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
bot.action(/buttonName:(.+)/, async(ctx) => {
    try {         
        const parems = JSON.parse(ctx.match[1]) // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 
        const UserId = parems.ctxValue      
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∫–Ω–æ–ø–∫–∏', UserId) 
        ctx.reply(`–¢–≤–æ–π ID: ${UserId}`)                      
    } catch (e) {
    console.error(e)
    }
  })  

  bot.on(message('text'), async(ctx) => { 
    try {           
    state = userStates.get(ctx.from.id) || {} 
    const messageText = ctx.message.text
    let userId = ctx.message.from.id
    let userName = ctx.message.from.username
    state.userName = userName
    userStates.set(ctx.from.id, state)
    console.log(state)
  
    switch (state.selecting) { 
      case 'ADD_TUR_NAME':    
        state.name = messageText
        state.selecting = 'ADD_TUR_OPERATOR_NAME'         
        userStates.set(ctx.from.id, state)
        await ctx.replyWithHTML(`–®–∞–≥ 2 –∏–∑ 16
  
  <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É—Å–ª—É–≥ (–∏–ª–∏ –§–ò–û –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü)</b>`)
        break
  
      case 'ADD_TUR_OPERATOR_NAME':
        state.operatorName = messageText
        state.selecting = 'ADD_TUR_TYPE'         
        userStates.set(ctx.from.id, state) 
        await ctx.replyWithHTML(`–®–∞–≥ 3 –∏–∑ 16
  
  <b>–¢–∏–ø —É—Å–ª—É–≥–∏ (–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä, —ç–∫—Å–∫—É—Ä—Å–∏–∏ –∏ —Ç.–¥.)</b>`)
          break
          default:
            ctx.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –æ—Ç –º–µ–Ω—è —Ö–æ—Ç–∏—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.')     
      
      }
    } catch {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err)
    }
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
  }).catch((err) => {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${err}`)
  })